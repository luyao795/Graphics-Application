/*
	This is an platform independent fragment shader used to render sprite
*/

#include <Shaders/shaders.inc>

// Constant Buffers
//=================

	DeclareConstantBuffer(g_constantBuffer_perFrame, 0)
	{
		float g_elapsedSecondCount_systemTime;
		float g_elapsedSecondCount_simulationTime;
		// For vec4 alignment
		vec2 g_padding;
	};

	DeclareConstantBuffer(g_constantBuffer_perMaterial, 1)
	{
		vec4 g_color;
	};
	
	DeclareTextureBuffer(g_color_texture, 0);
	
	DeclareSamplerState(g_color_samplerState, 0);

// Entry Point
//============

#if defined (EAE6320_PLATFORM_GL)

	// Input
	//======
	
	layout( location = 0 ) in vec2 i_texcoord;

	// Output
	//=======

	// Whatever color value is output from the fragment shader
	// will determine the color of the corresponding pixel on the screen
	out vec4 o_color;
	
	void main()

#elif defined (EAE6320_PLATFORM_D3D)

	void main(
	
	// Input
	//======
	in const float4 i_position : SV_POSITION,
	in const float2 i_texcoord : TEXCOORD0,

	// Output
	//=======

	// Whatever color value is output from the fragment shader
	// will determine the color of the corresponding pixel on the screen
	out float4 o_color : SV_TARGET

	)
	
#endif

	{
		vec4 sampledColor = CreateSampledColor( g_color_texture, i_texcoord, g_color_samplerState );
		
		// Output solid white
		vec4 gradientColor = vec4(
			// RGB
			1.0, 1.0, 1.0,
			// Alpha
			1.0 );

		// Make sure the range of those values is [0, 1]
		gradientColor.r = (sin( g_elapsedSecondCount_simulationTime ) + 1) / 2;
		gradientColor.g = (cos( g_elapsedSecondCount_simulationTime ) + 1) / 2;
		gradientColor.b = (sin( g_elapsedSecondCount_simulationTime ) + 1) / 2;
		
		vec4 combinedColor = vec4(sampledColor.r * gradientColor.r, sampledColor.g * gradientColor.g, sampledColor.b * gradientColor.b, sampledColor.a * gradientColor.a);
		
		o_color = combinedColor;
	}