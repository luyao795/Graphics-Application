/*
	This is an platform independent vertex shader used to render sprite
*/

#include <Shaders/shaders.inc>

// Constant Buffers
//=================

	DeclareConstantBuffer(g_constantBuffer_perFrame, 0)
	{
		float g_elapsedSecondCount_systemTime;
		float g_elapsedSecondCount_simulationTime;
		// For vec4 alignment
		vec2 g_padding;
	};

	DeclareConstantBuffer(g_constantBuffer_perMaterial, 1)
	{
		vec4 g_color;
	};

	DeclareConstantBuffer(g_constantBuffer_perDrawCall, 2)
	{
		// This is a placeholder to prevent an empty constant buffer declaration
		vec4 DUMMY;
	};

	// Entry Point
	//============

#if defined (EAE6320_PLATFORM_GL)

	// Input
	//======

	// The locations assigned are arbitrary
	// but must match the C calls to glVertexAttribPointer()

	// These values come from one of the VertexFormats::sGeometry that the vertex buffer was filled with in C code
	layout( location = 0 ) in vec2 i_position;
	layout( location = 1 ) in vec2 i_texcoord;

	// Output
	//=======
	
	layout( location = 0 ) out vec2 o_texcoord;

	void main()
	
#elif defined (EAE6320_PLATFORM_D3D)

	void main(

	// Input
	//======

	// The "semantics" (the keywords in all caps after the colon) are arbitrary,
	// but must match the C call to CreateInputLayout()

	// These values come from one of the VertexFormats::sSprite that the vertex buffer was filled with in C code
	in const float2 i_position : POSITION,	
	in const float2 i_texcoord : TEXCOORD0,

	// Output
	//=======

	// An SV_POSITION value must always be output from every vertex shader
	// so that the GPU can figure out which fragments need to be shaded
	out float4 o_position : SV_POSITION,
	out float2 o_texcoord : TEXCOORD0

	)
	
#endif

	{
		// Calculate the position of this vertex on screen
		{
	#if defined (EAE6320_PLATFORM_GL)
			// This shader sets the "out" position directly from the "in" position:
			gl_Position = vec4( i_position.x, i_position.y, 0.0, 1.0 );
	#elif defined (EAE6320_PLATFORM_D3D)
			// This shader sets the "out" position directly from the "in" position:
			o_position = float4( i_position.x, i_position.y, 0.0, 1.0 );
	#endif
			// This shader sets the "out" texcoord directly from the "in" texcoord:
			o_texcoord = i_texcoord;

		}
	}