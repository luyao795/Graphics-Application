/*
	This is an platform independent vertex shader used to render sprite
*/

#include <Shaders/shaders.inc>

	// Entry Point
	//============

#if defined (EAE6320_PLATFORM_GL)

	// Input
	//======

	// The locations assigned are arbitrary
	// but must match the C calls to glVertexAttribPointer()

	// These values come from one of the VertexFormats::sGeometry that the vertex buffer was filled with in C code
	layout( location = 0 ) in vec3 i_position;
	layout( location = 1 ) in vec4 i_meshcolor;

	// Output
	//=======
	
	layout( location = 0 ) out vec4 o_meshcolor;

	void main()
	
#elif defined (EAE6320_PLATFORM_D3D)

	void main(

	// Input
	//======

	// The "semantics" (the keywords in all caps after the colon) are arbitrary,
	// but must match the C call to CreateInputLayout()

	// These values come from one of the VertexFormats::sSprite that the vertex buffer was filled with in C code
	in const float3 i_position : POSITION,	
	in const float4 i_meshcolor : COLOR0,

	// Output
	//=======

	// An SV_POSITION value must always be output from every vertex shader
	// so that the GPU can figure out which fragments need to be shaded
	out float4 o_position : SV_POSITION,
	out float4 o_meshcolor : COLOR0

	)
	
#endif

	// Calculate the position of this vertex on screen
	{
		// This shader sets the "out" position directly from the "in" position:
		o_position = g_transform_cameraToProjected * g_transform_worldToCamera * g_transform_localToWorld * vec4( i_position.x, i_position.y, i_position.z, 1.0 );
		// This shader sets the "out" texcoord directly from the "in" texcoord:
		o_meshcolor = i_meshcolor;
	}