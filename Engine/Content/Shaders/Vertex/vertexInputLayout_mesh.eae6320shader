/*
	This vertex shader is used to create a Direct3D vertex input layout object
*/

#include <Shaders/shaders.inc>

// Entry Point
//============

#if defined (EAE6320_PLATFORM_GL)

	// Input
	//======

	// The locations assigned are arbitrary
	// but must match the C calls to glVertexAttribPointer()

	// These values come from one of the VertexFormats::sGeometry that the vertex buffer was filled with in C code
	layout( location = 0 ) in vec3 i_position;
	layout( location = 1 ) in vec4 i_meshcolor;

	// Output
	//=======
	
	layout( location = 0 ) out vec4 o_position;
	layout( location = 1 ) out vec4 o_meshcolor;

	void main()

#elif defined (EAE6320_PLATFORM_D3D)

	void main(

	// Input
	//======

	// The "semantics" (the keywords in all caps after the colon) are arbitrary,
	// but must match the C call to CreateInputLayout()

	in const float3 i_position : POSITION,
	in const float4 i_meshcolor : COLOR0,

	// Output
	//=======

	// An SV_POSITION value must always be output from every vertex shader
	// so that the GPU can figure out which fragments need to be shaded
	out float4 o_position : SV_POSITION,
	out float4 o_meshcolor : COLOR0

	)
	
#endif
	
{
	// The shader program is only used to generate a vertex input layout object;
	// the actual shading code is never used
	o_position = vec4( i_position, 1.0 );
	o_meshcolor = i_meshcolor;
}
